// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	resource "k8s.io/apimachinery/pkg/api/resource"
)

// CacheSpecApplyConfiguration represents an declarative configuration of the CacheSpec type for use
// with apply.
type CacheSpecApplyConfiguration struct {
	Limits        map[string]*resource.Quantity    `json:"limits,omitempty"`
	Requests      map[string]*resource.Quantity    `json:"requests,omitempty"`
	DataSourceRef *NamespacedRefApplyConfiguration `json:"dataSourceRef,omitempty"`
}

// CacheSpecApplyConfiguration constructs an declarative configuration of the CacheSpec type for use with
// apply.
func CacheSpec() *CacheSpecApplyConfiguration {
	return &CacheSpecApplyConfiguration{}
}

// WithLimits puts the entries into the Limits field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Limits field,
// overwriting an existing map entries in Limits field with the same key.
func (b *CacheSpecApplyConfiguration) WithLimits(entries map[string]*resource.Quantity) *CacheSpecApplyConfiguration {
	if b.Limits == nil && len(entries) > 0 {
		b.Limits = make(map[string]*resource.Quantity, len(entries))
	}
	for k, v := range entries {
		b.Limits[k] = v
	}
	return b
}

// WithRequests puts the entries into the Requests field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Requests field,
// overwriting an existing map entries in Requests field with the same key.
func (b *CacheSpecApplyConfiguration) WithRequests(entries map[string]*resource.Quantity) *CacheSpecApplyConfiguration {
	if b.Requests == nil && len(entries) > 0 {
		b.Requests = make(map[string]*resource.Quantity, len(entries))
	}
	for k, v := range entries {
		b.Requests[k] = v
	}
	return b
}

// WithDataSourceRef sets the DataSourceRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DataSourceRef field is set to the value of the last call.
func (b *CacheSpecApplyConfiguration) WithDataSourceRef(value *NamespacedRefApplyConfiguration) *CacheSpecApplyConfiguration {
	b.DataSourceRef = value
	return b
}
