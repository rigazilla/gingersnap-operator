// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.19.4
// source: config/cache/v1alpha1/cache.proto

package v1alpha1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	resource "k8s.io/apimachinery/pkg/api/resource"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Type of the database in format DB_DRIVER
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type DBType int32

const (
	DBType_ORACLE_OJDBC11      DBType = 0
	DBType_MYSQL_CONNECTORJ8_0 DBType = 1
)

// Enum value maps for DBType.
var (
	DBType_name = map[int32]string{
		0: "ORACLE_OJDBC11",
		1: "MYSQL_CONNECTORJ8_0",
	}
	DBType_value = map[string]int32{
		"ORACLE_OJDBC11":      0,
		"MYSQL_CONNECTORJ8_0": 1,
	}
)

func (x DBType) Enum() *DBType {
	p := new(DBType)
	*p = x
	return p
}

func (x DBType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DBType) Descriptor() protoreflect.EnumDescriptor {
	return file_config_cache_v1alpha1_cache_proto_enumTypes[0].Descriptor()
}

func (DBType) Type() protoreflect.EnumType {
	return &file_config_cache_v1alpha1_cache_proto_enumTypes[0]
}

func (x DBType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DBType.Descriptor instead.
func (DBType) EnumDescriptor() ([]byte, []int) {
	return file_config_cache_v1alpha1_cache_proto_rawDescGZIP(), []int{0}
}

// Supported format for the key of the cache entry
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type KeyFormat int32

const (
	KeyFormat_TEXT KeyFormat = 0
	KeyFormat_JSON KeyFormat = 1
)

// Enum value maps for KeyFormat.
var (
	KeyFormat_name = map[int32]string{
		0: "TEXT",
		1: "JSON",
	}
	KeyFormat_value = map[string]int32{
		"TEXT": 0,
		"JSON": 1,
	}
)

func (x KeyFormat) Enum() *KeyFormat {
	p := new(KeyFormat)
	*p = x
	return p
}

func (x KeyFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeyFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_config_cache_v1alpha1_cache_proto_enumTypes[1].Descriptor()
}

func (KeyFormat) Type() protoreflect.EnumType {
	return &file_config_cache_v1alpha1_cache_proto_enumTypes[1]
}

func (x KeyFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeyFormat.Descriptor instead.
func (KeyFormat) EnumDescriptor() ([]byte, []int) {
	return file_config_cache_v1alpha1_cache_proto_rawDescGZIP(), []int{1}
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// Describes the desired configuration for a Cache. Only DB Cache Service is supported atm
type CacheSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Memory resources profile required for the cache
	// mimic k8s data type
	Limits   map[string]*resource.Quantity `protobuf:"bytes,1,rep,name=limits,proto3" json:"limits,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Requests map[string]*resource.Quantity `protobuf:"bytes,2,rep,name=requests,proto3" json:"requests,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// DatasourceRef or a ServiceBindingRef (TODO clarify)
	DataSourceRef *NamespacedRef `protobuf:"bytes,3,opt,name=dataSourceRef,proto3" json:"dataSourceRef,omitempty"`
}

func (x *CacheSpec) Reset() {
	*x = CacheSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_cache_v1alpha1_cache_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CacheSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheSpec) ProtoMessage() {}

func (x *CacheSpec) ProtoReflect() protoreflect.Message {
	mi := &file_config_cache_v1alpha1_cache_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheSpec.ProtoReflect.Descriptor instead.
func (*CacheSpec) Descriptor() ([]byte, []int) {
	return file_config_cache_v1alpha1_cache_proto_rawDescGZIP(), []int{0}
}

func (x *CacheSpec) GetLimits() map[string]*resource.Quantity {
	if x != nil {
		return x.Limits
	}
	return nil
}

func (x *CacheSpec) GetRequests() map[string]*resource.Quantity {
	if x != nil {
		return x.Requests
	}
	return nil
}

func (x *CacheSpec) GetDataSourceRef() *NamespacedRef {
	if x != nil {
		return x.DataSourceRef
	}
	return nil
}

// Describes a data source connection. A map is available for passing implementation specific
// properties.
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type DataSourceSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DbType               DBType            `protobuf:"varint,1,opt,name=dbType,proto3,enum=gingersnap.config.cache.v1alpha1.DBType" json:"dbType,omitempty"`
	ConnectionProperties map[string]string `protobuf:"bytes,2,rep,name=connectionProperties,proto3" json:"connectionProperties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ServiceBindingRef    *NamespacedRef    `protobuf:"bytes,3,opt,name=serviceBindingRef,proto3" json:"serviceBindingRef,omitempty"`
}

func (x *DataSourceSpec) Reset() {
	*x = DataSourceSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_cache_v1alpha1_cache_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSourceSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourceSpec) ProtoMessage() {}

func (x *DataSourceSpec) ProtoReflect() protoreflect.Message {
	mi := &file_config_cache_v1alpha1_cache_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourceSpec.ProtoReflect.Descriptor instead.
func (*DataSourceSpec) Descriptor() ([]byte, []int) {
	return file_config_cache_v1alpha1_cache_proto_rawDescGZIP(), []int{1}
}

func (x *DataSourceSpec) GetDbType() DBType {
	if x != nil {
		return x.DbType
	}
	return DBType_ORACLE_OJDBC11
}

func (x *DataSourceSpec) GetConnectionProperties() map[string]string {
	if x != nil {
		return x.ConnectionProperties
	}
	return nil
}

func (x *DataSourceSpec) GetServiceBindingRef() *NamespacedRef {
	if x != nil {
		return x.ServiceBindingRef
	}
	return nil
}

// Describes a caching rule behaviours
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type EagerCachingRuleSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CacheRef *NamespacedRef `protobuf:"bytes,1,opt,name=cacheRef,proto3" json:"cacheRef,omitempty"`
	// Name of the table from where the data will be produced. Format could change depending
	// on the DB: table or schema.table must be at least supported
	TableName string `protobuf:"bytes,2,opt,name=tableName,proto3" json:"tableName,omitempty"`
	// Format of the key for the get(key) operation
	KeyType KeyFormat `protobuf:"varint,3,opt,name=keyType,proto3,enum=gingersnap.config.cache.v1alpha1.KeyFormat" json:"keyType,omitempty"`
	// Separator character in case of plain test key format
	KeySeparator string `protobuf:"bytes,4,opt,name=keySeparator,proto3" json:"keySeparator,omitempty"`
	// Table columns composing the primary key (where clause)
	KeyColumns []string `protobuf:"bytes,5,rep,name=keyColumns,proto3" json:"keyColumns,omitempty"`
	// Table columns that will be fetched from the DB (select clause)
	ValueColumns []string `protobuf:"bytes,6,rep,name=valueColumns,proto3" json:"valueColumns,omitempty"`
}

func (x *EagerCachingRuleSpec) Reset() {
	*x = EagerCachingRuleSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_cache_v1alpha1_cache_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EagerCachingRuleSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EagerCachingRuleSpec) ProtoMessage() {}

func (x *EagerCachingRuleSpec) ProtoReflect() protoreflect.Message {
	mi := &file_config_cache_v1alpha1_cache_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EagerCachingRuleSpec.ProtoReflect.Descriptor instead.
func (*EagerCachingRuleSpec) Descriptor() ([]byte, []int) {
	return file_config_cache_v1alpha1_cache_proto_rawDescGZIP(), []int{2}
}

func (x *EagerCachingRuleSpec) GetCacheRef() *NamespacedRef {
	if x != nil {
		return x.CacheRef
	}
	return nil
}

func (x *EagerCachingRuleSpec) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *EagerCachingRuleSpec) GetKeyType() KeyFormat {
	if x != nil {
		return x.KeyType
	}
	return KeyFormat_TEXT
}

func (x *EagerCachingRuleSpec) GetKeySeparator() string {
	if x != nil {
		return x.KeySeparator
	}
	return ""
}

func (x *EagerCachingRuleSpec) GetKeyColumns() []string {
	if x != nil {
		return x.KeyColumns
	}
	return nil
}

func (x *EagerCachingRuleSpec) GetValueColumns() []string {
	if x != nil {
		return x.ValueColumns
	}
	return nil
}

// Describes a caching rule behaviours
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type LazyCachingRuleSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CacheRef *NamespacedRef `protobuf:"bytes,1,opt,name=cacheRef,proto3" json:"cacheRef,omitempty"`
	// The select query needed to fetch values from the DB
	Query string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	// Table columns composing the primary key
	KeyColumns []string `protobuf:"bytes,3,rep,name=keyColumns,proto3" json:"keyColumns,omitempty"`
	// Separator character in case of plain test key format
	KeySeparator string `protobuf:"bytes,4,opt,name=keySeparator,proto3" json:"keySeparator,omitempty"`
}

func (x *LazyCachingRuleSpec) Reset() {
	*x = LazyCachingRuleSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_cache_v1alpha1_cache_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LazyCachingRuleSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LazyCachingRuleSpec) ProtoMessage() {}

func (x *LazyCachingRuleSpec) ProtoReflect() protoreflect.Message {
	mi := &file_config_cache_v1alpha1_cache_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LazyCachingRuleSpec.ProtoReflect.Descriptor instead.
func (*LazyCachingRuleSpec) Descriptor() ([]byte, []int) {
	return file_config_cache_v1alpha1_cache_proto_rawDescGZIP(), []int{3}
}

func (x *LazyCachingRuleSpec) GetCacheRef() *NamespacedRef {
	if x != nil {
		return x.CacheRef
	}
	return nil
}

func (x *LazyCachingRuleSpec) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *LazyCachingRuleSpec) GetKeyColumns() []string {
	if x != nil {
		return x.KeyColumns
	}
	return nil
}

func (x *LazyCachingRuleSpec) GetKeySeparator() string {
	if x != nil {
		return x.KeySeparator
	}
	return ""
}

// A namespaced reference to a resource
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type NamespacedRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *NamespacedRef) Reset() {
	*x = NamespacedRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_cache_v1alpha1_cache_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespacedRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespacedRef) ProtoMessage() {}

func (x *NamespacedRef) ProtoReflect() protoreflect.Message {
	mi := &file_config_cache_v1alpha1_cache_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespacedRef.ProtoReflect.Descriptor instead.
func (*NamespacedRef) Descriptor() ([]byte, []int) {
	return file_config_cache_v1alpha1_cache_proto_rawDescGZIP(), []int{4}
}

func (x *NamespacedRef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NamespacedRef) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// Document representation of a cache and all the related rules
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type CacheConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CacheSpec             *CacheSpec              `protobuf:"bytes,1,opt,name=cacheSpec,proto3" json:"cacheSpec,omitempty"`
	EagerCachingRuleSpecs []*EagerCachingRuleSpec `protobuf:"bytes,2,rep,name=eagerCachingRuleSpecs,proto3" json:"eagerCachingRuleSpecs,omitempty"`
	LazyCachingRuleSpecs  []*LazyCachingRuleSpec  `protobuf:"bytes,3,rep,name=LazyCachingRuleSpecs,proto3" json:"LazyCachingRuleSpecs,omitempty"`
}

func (x *CacheConf) Reset() {
	*x = CacheConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_cache_v1alpha1_cache_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CacheConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheConf) ProtoMessage() {}

func (x *CacheConf) ProtoReflect() protoreflect.Message {
	mi := &file_config_cache_v1alpha1_cache_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheConf.ProtoReflect.Descriptor instead.
func (*CacheConf) Descriptor() ([]byte, []int) {
	return file_config_cache_v1alpha1_cache_proto_rawDescGZIP(), []int{5}
}

func (x *CacheConf) GetCacheSpec() *CacheSpec {
	if x != nil {
		return x.CacheSpec
	}
	return nil
}

func (x *CacheConf) GetEagerCachingRuleSpecs() []*EagerCachingRuleSpec {
	if x != nil {
		return x.EagerCachingRuleSpecs
	}
	return nil
}

func (x *CacheConf) GetLazyCachingRuleSpecs() []*LazyCachingRuleSpec {
	if x != nil {
		return x.LazyCachingRuleSpecs
	}
	return nil
}

var File_config_cache_v1alpha1_cache_proto protoreflect.FileDescriptor

var file_config_cache_v1alpha1_cache_proto_rawDesc = []byte{
	0x0a, 0x21, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x20, 0x67, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x6e, 0x61, 0x70, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x2c, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x72, 0x79, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xe2, 0x03, 0x0a, 0x09, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x4f, 0x0a, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x67, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x73, 0x12, 0x55, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x6e, 0x61,
	0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x55, 0x0a, 0x0d, 0x64, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x67, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x64, 0x52, 0x65,
	0x66, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66,
	0x1a, 0x69, 0x0a, 0x0b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x6b, 0x0a, 0x0d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x44,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xfa, 0x02, 0x0a, 0x0e, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x40, 0x0a, 0x06, 0x64,
	0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x67, 0x69,
	0x6e, 0x67, 0x65, 0x72, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44,
	0x42, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x64, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x7e, 0x0a,
	0x14, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x67, 0x69,
	0x6e, 0x67, 0x65, 0x72, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x5d, 0x0a,
	0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x69, 0x6e, 0x67, 0x65,
	0x72, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x64, 0x52, 0x65, 0x66, 0x52, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x66, 0x1a, 0x47, 0x0a, 0x19,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb0, 0x02, 0x0a, 0x14, 0x45, 0x61, 0x67, 0x65, 0x72, 0x43,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x4b,
	0x0a, 0x08, 0x63, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x67, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x64, 0x52, 0x65,
	0x66, 0x52, 0x08, 0x63, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x66, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x07, 0x6b, 0x65, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x67, 0x69, 0x6e,
	0x67, 0x65, 0x72, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4b, 0x65,
	0x79, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x6b, 0x65, 0x79, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6b, 0x65, 0x79, 0x53, 0x65, 0x70, 0x61, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x6b, 0x65, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x65, 0x79, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x22, 0xbc, 0x01, 0x0a, 0x13, 0x4c, 0x61, 0x7a,
	0x79, 0x43, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x4b, 0x0a, 0x08, 0x63, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x6e, 0x61, 0x70, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x64,
	0x52, 0x65, 0x66, 0x52, 0x08, 0x63, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x66, 0x12, 0x14, 0x0a,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x6b, 0x65, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x65, 0x79, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6b, 0x65, 0x79, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6b, 0x65, 0x79, 0x53, 0x65,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x41, 0x0a, 0x0d, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x64, 0x52, 0x65, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0xaf, 0x02, 0x0a, 0x09, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x49, 0x0a, 0x09, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x69,
	0x6e, 0x67, 0x65, 0x72, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x6c, 0x0a, 0x15, 0x65, 0x61, 0x67, 0x65, 0x72, 0x43, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x6e, 0x61, 0x70, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x61, 0x67, 0x65, 0x72, 0x43, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x15, 0x65, 0x61, 0x67, 0x65,
	0x72, 0x43, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x73, 0x12, 0x69, 0x0a, 0x14, 0x4c, 0x61, 0x7a, 0x79, 0x43, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67,
	0x52, 0x75, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x67, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4c, 0x61, 0x7a, 0x79, 0x43, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x52, 0x75,
	0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x14, 0x4c, 0x61, 0x7a, 0x79, 0x43, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x73, 0x2a, 0x35, 0x0a, 0x06,
	0x44, 0x42, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x52, 0x41, 0x43, 0x4c, 0x45,
	0x5f, 0x4f, 0x4a, 0x44, 0x42, 0x43, 0x31, 0x31, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x59,
	0x53, 0x51, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x4a, 0x38, 0x5f,
	0x30, 0x10, 0x01, 0x2a, 0x1f, 0x0a, 0x09, 0x4b, 0x65, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x58, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x53,
	0x4f, 0x4e, 0x10, 0x01, 0x42, 0x10, 0x50, 0x01, 0x5a, 0x0c, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_config_cache_v1alpha1_cache_proto_rawDescOnce sync.Once
	file_config_cache_v1alpha1_cache_proto_rawDescData = file_config_cache_v1alpha1_cache_proto_rawDesc
)

func file_config_cache_v1alpha1_cache_proto_rawDescGZIP() []byte {
	file_config_cache_v1alpha1_cache_proto_rawDescOnce.Do(func() {
		file_config_cache_v1alpha1_cache_proto_rawDescData = protoimpl.X.CompressGZIP(file_config_cache_v1alpha1_cache_proto_rawDescData)
	})
	return file_config_cache_v1alpha1_cache_proto_rawDescData
}

var file_config_cache_v1alpha1_cache_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_config_cache_v1alpha1_cache_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_config_cache_v1alpha1_cache_proto_goTypes = []interface{}{
	(DBType)(0),                  // 0: gingersnap.config.cache.v1alpha1.DBType
	(KeyFormat)(0),               // 1: gingersnap.config.cache.v1alpha1.KeyFormat
	(*CacheSpec)(nil),            // 2: gingersnap.config.cache.v1alpha1.CacheSpec
	(*DataSourceSpec)(nil),       // 3: gingersnap.config.cache.v1alpha1.DataSourceSpec
	(*EagerCachingRuleSpec)(nil), // 4: gingersnap.config.cache.v1alpha1.EagerCachingRuleSpec
	(*LazyCachingRuleSpec)(nil),  // 5: gingersnap.config.cache.v1alpha1.LazyCachingRuleSpec
	(*NamespacedRef)(nil),        // 6: gingersnap.config.cache.v1alpha1.NamespacedRef
	(*CacheConf)(nil),            // 7: gingersnap.config.cache.v1alpha1.CacheConf
	nil,                          // 8: gingersnap.config.cache.v1alpha1.CacheSpec.LimitsEntry
	nil,                          // 9: gingersnap.config.cache.v1alpha1.CacheSpec.RequestsEntry
	nil,                          // 10: gingersnap.config.cache.v1alpha1.DataSourceSpec.ConnectionPropertiesEntry
	(*resource.Quantity)(nil),    // 11: k8s.io.apimachinery.pkg.api.resource.Quantity
}
var file_config_cache_v1alpha1_cache_proto_depIdxs = []int32{
	8,  // 0: gingersnap.config.cache.v1alpha1.CacheSpec.limits:type_name -> gingersnap.config.cache.v1alpha1.CacheSpec.LimitsEntry
	9,  // 1: gingersnap.config.cache.v1alpha1.CacheSpec.requests:type_name -> gingersnap.config.cache.v1alpha1.CacheSpec.RequestsEntry
	6,  // 2: gingersnap.config.cache.v1alpha1.CacheSpec.dataSourceRef:type_name -> gingersnap.config.cache.v1alpha1.NamespacedRef
	0,  // 3: gingersnap.config.cache.v1alpha1.DataSourceSpec.dbType:type_name -> gingersnap.config.cache.v1alpha1.DBType
	10, // 4: gingersnap.config.cache.v1alpha1.DataSourceSpec.connectionProperties:type_name -> gingersnap.config.cache.v1alpha1.DataSourceSpec.ConnectionPropertiesEntry
	6,  // 5: gingersnap.config.cache.v1alpha1.DataSourceSpec.serviceBindingRef:type_name -> gingersnap.config.cache.v1alpha1.NamespacedRef
	6,  // 6: gingersnap.config.cache.v1alpha1.EagerCachingRuleSpec.cacheRef:type_name -> gingersnap.config.cache.v1alpha1.NamespacedRef
	1,  // 7: gingersnap.config.cache.v1alpha1.EagerCachingRuleSpec.keyType:type_name -> gingersnap.config.cache.v1alpha1.KeyFormat
	6,  // 8: gingersnap.config.cache.v1alpha1.LazyCachingRuleSpec.cacheRef:type_name -> gingersnap.config.cache.v1alpha1.NamespacedRef
	2,  // 9: gingersnap.config.cache.v1alpha1.CacheConf.cacheSpec:type_name -> gingersnap.config.cache.v1alpha1.CacheSpec
	4,  // 10: gingersnap.config.cache.v1alpha1.CacheConf.eagerCachingRuleSpecs:type_name -> gingersnap.config.cache.v1alpha1.EagerCachingRuleSpec
	5,  // 11: gingersnap.config.cache.v1alpha1.CacheConf.LazyCachingRuleSpecs:type_name -> gingersnap.config.cache.v1alpha1.LazyCachingRuleSpec
	11, // 12: gingersnap.config.cache.v1alpha1.CacheSpec.LimitsEntry.value:type_name -> k8s.io.apimachinery.pkg.api.resource.Quantity
	11, // 13: gingersnap.config.cache.v1alpha1.CacheSpec.RequestsEntry.value:type_name -> k8s.io.apimachinery.pkg.api.resource.Quantity
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_config_cache_v1alpha1_cache_proto_init() }
func file_config_cache_v1alpha1_cache_proto_init() {
	if File_config_cache_v1alpha1_cache_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_config_cache_v1alpha1_cache_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CacheSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_cache_v1alpha1_cache_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSourceSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_cache_v1alpha1_cache_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EagerCachingRuleSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_cache_v1alpha1_cache_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LazyCachingRuleSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_cache_v1alpha1_cache_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespacedRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_cache_v1alpha1_cache_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CacheConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_config_cache_v1alpha1_cache_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_config_cache_v1alpha1_cache_proto_goTypes,
		DependencyIndexes: file_config_cache_v1alpha1_cache_proto_depIdxs,
		EnumInfos:         file_config_cache_v1alpha1_cache_proto_enumTypes,
		MessageInfos:      file_config_cache_v1alpha1_cache_proto_msgTypes,
	}.Build()
	File_config_cache_v1alpha1_cache_proto = out.File
	file_config_cache_v1alpha1_cache_proto_rawDesc = nil
	file_config_cache_v1alpha1_cache_proto_goTypes = nil
	file_config_cache_v1alpha1_cache_proto_depIdxs = nil
}
